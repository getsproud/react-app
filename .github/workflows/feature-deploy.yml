name: Feature Deployment

on:
  push:
    branches:
    - 'feature/*'
    paths-ignore:
    - '*.md'
    - LICENSE

env:
  IMAGE: react-app
  CLUSTER_ENV: development

jobs:
  get-tag:
    runs-on: ubuntu-latest
    steps:
    - name: Get the Tag
      outputs:
        TAG: ${{ steps.get-ref.outputs.TAG }}
      id: get-ref
      run: |
        echo $(echo ${github.ref} | cut -c 12- | cut -d '-' -f 1 | sed s/\\//-/g)
        echo '::set-output name=TAG::$(echo ${github.ref} | cut -c 12- | cut -d '-' -f 1 | sed s/\\//-/g)'

  build-image:
    needs: [get-tag]
    runs-on: ubuntu-latest

    steps:
    - uses:  actions/checkout@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ needs.get-tag.outputs.TAG }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to Github Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: dominicrico
        password: ${{ secrets.GH_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ghcr.io/getsproud/${{ env.IMAGE }}:${{ needs.get-tag.outputs.TAG }}
        target: production
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
        build-args: NODE_ENV="development"

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-to-cluster:
    needs: [build-image, get-tag]
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to Cluster
      env:
        KUBECONFIG: ${{ secrets.KUBE_CONFIG_DATA_STAGE }}
      run: |
        echo "${{ env.KUBECONFIG }}" | base64 --decode > ${HOME}/.kube/config

        # install/upgrade helm chart
        helm upgrade --install ${{ env.IMAGE }} ./deploy/helm/${{ env.IMAGE }} \
        --values ./deploy/helm/${{ env.IMAGE }}/env.values.${{ env.CLUSTER_ENV }}.yaml \
        --set env_values.service.${{ env.IMAGE }}=${{ needs.get-tag.outputs.TAG }} \
        --set env_values.nodeEnv=${{ env.CLUSTER_ENV }} \
        --namespace sproud-${{ needs.get-tag.outputs.TAG }} \
        --create-namespace
