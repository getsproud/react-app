name: Feature Deployment

on:
  push:
    branches:
      - '*'
      - '!main'
    paths-ignore:
    - '*.md'
    - LICENSE

env:
  IMAGE: react-app
  CLUSTER_ENV: development

jobs:
  build-image:
    runs-on: ubuntu-latest

    steps:
    - uses:  actions/checkout@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

  get-tag:
    runs-on: ubuntu-latest
    needs: [build-image]

    steps:
    - name: Get the Ref
      id: get-ref
      uses: ankitvgupta/ref-to-tag-action@master
      with:
        ref: ${{ github.ref }}
        head_ref: ${{ github.head_ref }}

  push-image:
    needs: [get-tag]
    runs-on: ubuntu-latest

    steps:
    - name: Login to Github Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: dominicrico
        password: ${{ secrets.GH_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ghcr.io/getsproud/${{ env.IMAGE }}:${{ steps.get-ref.outputs.tag }}
        target: production
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        build-args: NODE_ENV="development"

  deploy-to-cluster:
    needs: [push-image]
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to Cluster
      env:
        KUBECONFIG: ${{ secrets.KUBE_CONFIG_DATA_STAGE }}
      run: |
        echo "${{ env.KUBECONFIG }}" | base64 --decode > ${HOME}/.kube/config
        echo "TAG=$(echo ${github.ref} | cut -c 12- | cut -d '-' -f 1 | sed s/\\//-/g)" >> $GITHUB_ENV

        # install/upgrade helm chart
        helm upgrade --install ${{ env.IMAGE }} ./deploy/helm/${{ env.IMAGE }} \
        --values ./deploy/helm/${{ env.IMAGE }}/env.values.${{ env.CLUSTER_ENV }}.yaml \
        --set env_values.service.${{ env.IMAGE }}=${{ env.TAG }} \
        --set env_values.nodeEnv=${{ env.CLUSTER_ENV }} \
        --namespace sproud-${{ env.TAG }}
        --create-namespace \

  send-notification:
    need: [deploy-to-cluster]
    runs-on: ubuntu-latest

    steps:
    - name: Get Message
      id: log
      run: echo "::set-output name=message::$(git log --no-merges --oneline)"

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_ICON: https://avatars.slack-edge.com/2021-06-14/2168279331762_d05933b7090308e2869b_102.png
        SLACK_CHANNEL: releases-stage
        SLACK_USERNAME: sproud.bot
        SLACK_COLOR: ${{ job.status }}
        SLACK_MESSAGE: ${{ steps.log.outputs.message }}
        SLACK_TITLE: Deployed new ${{ env.IMAGE }} service on https://stage.sproud.dev
        SLACK_FOOTER: Powered by sproud.
